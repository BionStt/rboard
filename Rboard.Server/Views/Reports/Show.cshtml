@model Report
@{
    ViewData["Title"] = Model.Category + " - " + Model.Name;

    SlideshowMode slideshowMode = (SlideshowMode)ViewData["SlideshowMode"];
    TimeSpan slideshowTime = (TimeSpan)ViewData["SlideshowTime"];

    bool debugMode = (bool)ViewData["DebugMode"];
    bool pauseMode = (bool)ViewData["PauseMode"];
    bool force = (bool)ViewData["Force"];

    string url = Url.Action("Raw", "Reports", new { category = Model.Category.ToLower(), name = Model.GetUrl(), force = force || debugMode });
}

<img class="loading" src="/libraries/loading.gif" />
<iframe id="report-frame" src="@url"></iframe>

@if (!debugMode && !pauseMode && slideshowMode != SlideshowMode.Disabled)
{
    List<Report> allReports = (ViewData["Reports"] as IEnumerable<Report>).ToList();
    List<string> categories = allReports.Select(r => r.Category).Distinct().ToList();

    Report nextReport = null;

    switch (slideshowMode)
    {
        case SlideshowMode.SingleReport:
        {
            nextReport = Model;
            break;
        }

        case SlideshowMode.AllReports:
        {
            int index = (allReports.IndexOf(Model) + 1) % allReports.Count;
            nextReport = allReports[index];

            break;
        }

        case SlideshowMode.CategoryReports:
        {
            List<Report> categoryReports = allReports.Where(r => r.Category == Model.Category).ToList();

            int index = (categoryReports.IndexOf(Model) + 1) % categoryReports.Count;
            nextReport = categoryReports[index];

            break;
        }

        case SlideshowMode.FirstReports:
        {
            int index = (categories.IndexOf(Model.Category) + 1) % categories.Count;
            string category = categories[index];
            nextReport = allReports.Where(r => r.Category == category).First();

            break;
        }
    }

    string nextUrl = Url.Action("Show", "Reports", new { category = nextReport.Category.ToLower(), name = nextReport.GetUrl() });

<script>
    function dispatchIFrameEvents(iframe)
    {
        var existingOnMouseMove = iframe.contentWindow.onmousemove;

        iframe.contentWindow.onmousemove = function (e)
        {
            if (existingOnMouseMove)
                existingOnMouseMove(e);

            var evt = document.createEvent("MouseEvents");
            var boundingClientRect = iframe.getBoundingClientRect();

            evt.initMouseEvent("mousemove",
                true, // bubbles
                false, // not cancelable 
                window, e.detail, e.screenX, e.screenY, e.clientX + boundingClientRect.left, e.clientY + boundingClientRect.top, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, e.button,
                null // no related element
            );

            iframe.dispatchEvent(evt);
        };
    }

    var timer;
    var nextPage = "@nextUrl";

    window.onload = resetTimer;
    document.onmousemove = resetTimer;

    var iframe = document.getElementById("report-frame");
    dispatchIFrameEvents(iframe);

    function idle()
    {
        location.href = nextPage;
    }

    function resetTimer()
    {
        clearTimeout(timer);
        timer = setTimeout(idle, @((int)slideshowTime.TotalMilliseconds));
    }
</script>
}